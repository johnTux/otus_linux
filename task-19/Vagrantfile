# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inetRouter => {
        :box_name => "centos/6",
        #:public => {:ip => '10.10.10.1', :adapter => 1},
        :net => [
                   {ip: '192.168.255.1', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "router-net"}
                ]
  },

  :inetRouter2 => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.2', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "router-net"},
                ]
  },

  :centralRouter => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.3', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "router-net"},
                   {ip: '192.168.0.1', adapter: 3, netmask: "255.255.255.240", virtualbox__intnet: "dir-net"},
                ]
  },

  :centralServer => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.0.2', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "dir-net"}
                ]
  },

}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|
      
    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s

        config.vm.provider "virtualbox" do |v|
          v.memory = 256
        end

        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        
        case boxname.to_s
          when "inetRouter"
            box.vm.provision "shell", run: "always", inline: <<-SHELL
              echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
              sysctl -p /etc/sysctl.conf
              echo "GATEWAY=192.168.255.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              ip route add 192.168.0.0/16 via 192.168.255.3              
              sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
              cp /vagrant/files/iptables_inetRouter /etc/sysconfig/iptables
              service network restart
              service sshd restart
              service iptables stop
              SHELL
          when "inetRouter2"
            box.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1", id: "nginx"
            box.vm.provision "shell", run: "always", inline: <<-SHELL
              yum install iptables-services -y
              echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
              sysctl -p /etc/sysctl.conf
              ip route add 192.168.0.0/16 via 192.168.255.3
              echo "GATEWAY=192.168.255.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
              cp /vagrant/files/iptables_inetRouter2 /etc/sysconfig/iptables
              systemctl restart network
              systemctl restart iptables.service
            SHELL
          when "centralRouter"
            box.vm.provision "shell", run: "always", inline: <<-SHELL
              yum install nmap -y
              echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
              sysctl -p /etc/sysctl.conf
              echo "GATEWAY=192.168.255.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
              cp /vagrant/files/knock.sh ./
              chmod +x ./knock.sh
              systemctl restart network
              SHELL
          when "centralServer"
            box.vm.provision "shell", run: "always", inline: <<-SHELL
              yum install epel-release -y
              yum install nginx -y
              echo "GATEWAY=192.168.0.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
              systemctl restart network
              systemctl enable nginx
              systemctl start nginx
              SHELL
          end
       end
   end
end
